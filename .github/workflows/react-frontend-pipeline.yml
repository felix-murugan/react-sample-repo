
name: React CI/CD - Feature to Development

on:
  pull_request:
    branches: [development]
    types: [closed]

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  check-merged:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    outputs:
      should_run: ${{ steps.set_output.outputs.should_run }}
    steps:
      - id: set_output
        run: echo "should_run=true" >> $GITHUB_OUTPUT

  codeql-analysis:
    name: Code Scanning
    needs: check-merged
    if: needs.check-merged.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [javascript]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  testing:
    name: Test React App
    needs: codeql-analysis
    if: needs.check-merged.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./cart-project
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies and Build 
        run: |
          npm install
          npm run build

      - name: Run Lint (optional)
        run: npm run lint || true

      - name: Run Tests (optional)
        run: npm test --if-present

      - name: Build React App
        run: npm run build 

      - name: Upload React artifact
        uses: actions/upload-artifact@v4
        with:
          name: React-Artifact-code
          path: ./

  zip-and-push-react-artifact:
    needs: testing
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target repo
        uses: actions/checkout@v3
        with:
          repository: felix-murugan/react-artifact-repo 
          ref: main
          token: ${{ secrets.My_GITHUB_TOKEN }}
          path: react-artifact-repo
          
      - run: mkdir -p react-artifact-repo/frontend-artifact
     

      - name: Check for existing latest version hash
        id: skip-check
        run: |
          cd react-artifact-repo/frontend-artifact    
          latest_file=$(ls frontend-artifact-v*.zip 2>/dev/null | sort -V | tail -n 1)
          if [[ -f "$latest_file" ]]; then
            unzip -p "$latest_file" | sha256sum | cut -d' ' -f1 > ../latest_hash.txt
          else
            
            echo "no_previous_hash" > ../latest_hash.txt
          fi

      - name: Download React artifact
        uses: actions/download-artifact@v4
        with:
          name: React-Artifact-code
          path: React-Artifact-code

      - name: Generate current artifact hash
        run: |
          cd React-Artifact-code
          zip -r react-temp.zip .
          unzip -p react-temp.zip | sha256sum | cut -d' ' -f1 > ../current_hash.txt

      - name: Check for changes
        id: hash-diff
        run: |
          if cmp -s latest_hash.txt current_hash.txt; then
            echo "no_change=true" >> $GITHUB_OUTPUT
          else
            echo "no_change=false" >> $GITHUB_OUTPUT
          fi  

      - name: Skip if no changes
        if: steps.hash-diff.outputs.no_change == 'true'
        run: echo "No changes in React Artifact code â€” skipping commit and push."

      - name: Determine next version
        if: steps.hash-diff.outputs.no_change == 'false'
        id: version
        run: |
          cd react-artifact-repo/frontend-artifact
          count=$(ls frontend-artifact-v*.zip 2>/dev/null | wc -l)
          
          echo "version=v$((count + 1))" >> $GITHUB_OUTPUT

      - name: Rename and move artifact
        if: steps.hash-diff.outputs.no_change == 'false'
        run: |
          VERSION=${{ steps.version.outputs.version }}
          mv React-Artifact-code/react-temp.zip "react-artifact-repo/frontend-artifact/frontend-artifact-${VERSION}.zip"
          cp "react-artifact-repo/frontend-artifact/frontend-artifact-${VERSION}.zip" \
             react-artifact-repo/frontend-artifact/frontend-artifact-latest.zip


      - name: Commit and push ZIP to development branch
        if: steps.hash-diff.outputs.no_change == 'false'
        run: |
          cd react-artifact-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add frontend-artifact/frontend-artifact-*.zip
          git commit -m "Add frontend-artifact ${{ steps.version.outputs.version }}"
          git push origin main

  create-pr:
    name: Create Pull Request to Main
    runs-on: ubuntu-latest
    needs: zip-and-push-react-artifact
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create Pull Request from development to main
        uses: repo-sync/pull-request@v2
        with:
          source_branch: development
          destination_branch: main
          pr_title: "Auto PR: development to main"
          pr_body: |
            This PR was automatically created from the development branch to the main branch.
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}

  wait-for-approval:
    name: Wait for Manual Approval
    runs-on: ubuntu-latest
    needs: create-pr
    # environment:
    #   name: production
      # url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: Approval Required
        run: echo "Awaiting manual approval..."

  build-and-deploy:
    needs: wait-for-approval
    runs-on: ubuntu-latest
    steps:
      - name: Docker build     
  
