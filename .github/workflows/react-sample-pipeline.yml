name: React CI/CD - Development

on:
  push:
    branches: [development]
  pull_request:
    branches: [development]

permissions:
  contents: read
  security-events: write

jobs:
  build:
    name: Build and Test React App , Artifact & Package
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./cart

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies and build
        run:
            npm install
            npm run build

      - name: Run Lint (optional)
        run: npm run lint || true

      - name: Run Tests (optional)
        run: npm test --if-present

      - name: Check if `useeffect.css` exists
        run: |
          echo "Checking if useeffect.css exists..."
          ls ./src/Component/State/useeffect.css || echo "useeffect.css not found"

      - name: Build React App
        run: |
          echo "Starting build process..."
          npm run build -- --debug  # Added debug flag to gather more info

      - name: Next Step (e.g., Upload or Deploy)
        run: echo "Build completed! Running next task..."

  codeql-analysis:
    name: CodeQL Static Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [javascript]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  zip-and-push-react-artifact:
    needs: build
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Checkout target repo 
        uses: actions/checkout@v3
        with:
          repository: felix-murugan/react-artifact-repo
          ref: main
          token: ${{ secrets.My_GITHUB_TOKEN }}
          path: react-artifact-repo

      - name: Check for existing latest version hash
        id: skip-check
        run: |
          cd react-artifact-repo/frontend-artifact || mkdir -p react-artifact-repo/frontend-artifact
          latest_file=$(ls frontend-artifact-v*.zip 2>/dev/null | sort -V | tail -n 1)
          if [[ -f "$latest_file" ]]; then
            unzip -p "$latest_file" | sha256sum | cut -d' ' -f1 > ../latest_hash.txt
          else
            echo "no_previous_hash" > ../latest_hash.txt
          fi

      - name: Build React application
        run: |
          cd react-app
          npm install
          npm run build

      - name: Generate current artifact hash
        run: |
          cd react-app/build
          zip -r react-app-temp.zip .
          unzip -p react-app-temp.zip | sha256sum | cut -d' ' -f1 > ../current_hash.txt

      - name: Check for changes
        id: hash-diff
        run: |
          if cmp -s latest_hash.txt current_hash.txt; then
            echo "no_change=true" >> $GITHUB_OUTPUT
          else
            echo "no_change=false" >> $GITHUB_OUTPUT
          fi

      - name: Skip if no changes
        if: steps.hash-diff.outputs.no_change == 'true'
        run: echo "No changes in React app â€” skipping commit and push."

      - name: Determine next version
        if: steps.hash-diff.outputs.no_change == 'false'
        id: version
        run: |
          cd react-artifact-repo/frontend-artifact
          count=$(ls frontend-artifact-v*.zip 2>/dev/null | wc -l)
          next_version=$((count + 1))
          echo "version=v$next_version" >> $GITHUB_OUTPUT

      - name: Rename and move artifact
        if: steps.hash-diff.outputs.no_change == 'false'
        run: |
          VERSION=${{ steps.version.outputs.version }}
          mv react-app/build/react-app-temp.zip react-artifact-repo/frontend-artifact/frontend-artifact-${VERSION}.zip

      - name: Commit and push ZIP to target repository
        if: steps.hash-diff.outputs.no_change == 'false'
        run: |
          cd artifact-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add react-app-*.zip
          git commit -m "Add React ZIP version ${{ steps.version.outputs.version }}"
          git push origin main
